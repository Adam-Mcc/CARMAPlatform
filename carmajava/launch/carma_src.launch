<?xml version="1.0"?>
<!--
  Copyright (C) 2018-2019 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	carma_src.launch

  The ros launch file for the CARMA 3 Platform ROS Network.
  Launches all the needed ros nodes and sets up the parameter server.
  Also sets up all static transforms used by tf2 within the system.

  Use:
  First delete the generated build/scripts folder in all java packages.
  roslaunch carma carma.launch
  After using source devel/setup.bash from workspace root.

  If not using simulated drivers they are activated using ros arguments as shown below.
  roslaunch carma carma.launch mock_can:=false can_data_file:=/path/to/file.csv
-->
<launch>
  <!-- Constants -->
  <!-- Directory of Parameter Files -->
  <arg name="CARMA_DIR" default="$(find carma)" doc="The path of the package directory"/>
  <arg name="PARAM_DIR" default="$(arg CARMA_DIR)/launch/params" doc="Directory of yaml parameter files"/>
  <!-- Path to Unified Robot Description Format URDF file for loading static transforms -->
  <arg name="URDF_FILE" default="$(arg CARMA_DIR)/launch/urdf/carma.urdf" doc="Path to the vehicle's URDF file"/>
  <!-- Simulated Driver Arguments -->
  <!-- Directory of Simulation Files -->
  <arg name="DATA_DIR" default="$(arg CARMA_DIR)/mock_drivers/src/test/data" doc="Directory of driver simulation data files"/>
  <!-- Directory of Engineering Tools -->
  <arg name="SCRIPTS_DIR" default="$(arg CARMA_DIR)/../engineering_tools" doc="The directory containing scripts for execution"/>
  <!-- Directory containing additional carma launch files such as the drivers.launch file -->
  <arg name="LAUNCH_DIR" default="$(arg CARMA_DIR)/launch" doc="Directory containing additional carma launch files such as driver.launch"/>

  <env name="ROSCONSOLE_CONFIG_FILE" value="$(arg PARAM_DIR)/roscpp_log.config"/>

  <!-- Startup Drivers With Main CARMA System -->
  <arg name="launch_drivers" default="true" doc="True if drivers are to be launched with the CARMA Platform, overrides mock_* args"/>

  <!-- Simulation Usage -->
  <arg name="mock_can" default="true" doc="True if using a simulated can driver"/>
  <arg name="mock_dsrc" default="true" doc="True if using a simulated dsrc driver"/>
  <arg name="mock_srx_controller" default="true" doc="True if using a simulated srx controller driver"/>
  <arg name="mock_pinpoint" default="true" doc="True if using a simulated pinpoint driver"/>
  <arg name="mock_radar" default="true" doc="True if using a simulated radar driver"/>
  <arg name="mock_lateral_controller" default="true" doc="True if using a simulated lateral controller"/>

  <!-- Data Files -->
  <arg name="can_data_file" default="$(arg DATA_DIR)/can.csv" doc="Path for can simulation data"/>
  <arg name="dsrc_data_file" default="$(arg DATA_DIR)/dsrc.csv" doc="Path for dsrc simulation data"/>
  <arg name="srx_controller_data_file" default="$(arg DATA_DIR)/srx_controller.csv" doc="Path for srx controller simulation data"/>
  <arg name="pinpoint_data_file" default="$(arg DATA_DIR)/pinpoint_stationary.csv" doc="Path for pinpoint simulation data"/>
  <arg name="radar_data_file" default="$(arg DATA_DIR)/radar.csv" doc="Path for radar simulation data"/>
  <arg name="cellular_data_file" default="$(arg DATA_DIR)/dsrc.csv" doc="Path cellular can simulation data"/>

  <!-- Debug -->
  <!-- JVM Debug arguments -->
  <arg name="JVM_DEBUG_OPTS" default="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005" doc="Start rosjava node with these JVM arguments for debugging"/>
  <!-- JVM Logging Options -->
  <arg name="log_config" default="$(arg PARAM_DIR)/log-config.properties" doc="The location of the logging configuration file"/>
  <arg name="JVM_LOG_OPTS" value="-Djava.util.logging.config.file=$(arg log_config)"/>
  <!-- Apply logging properties to all java nodes using JAVA_OPTS-->
  <env name="JAVA_OPTS" value="$(arg JVM_LOG_OPTS)"/>
  <!-- Set to true to enable debugging on the specified node -->
  <arg name="debug_guidance" default="false" doc="Set true to enable debugging on the Guidance Main node"/>
  <arg name="debug_interface_mgr" default="false" doc="Set true to enable debugging on the Interface Manager node"/>
  <arg name="debug_msg_consumer" default="false" doc="Set true to enable debugging on the Message Consumer node"/>
  <arg name="debug_route" default="false" doc="Set true to enable debugging on the Route node"/>
  <arg name="debug_mock_pinpoint" default="false" doc="Set true to enable debugging on the Mock Pinpoint Driver"/>
  <arg name="debug_mock_srx_controller" default="false" doc="Set true to enable debugging on the Mock SRX Controller Driver"/>
  <arg name="debug_mock_can" default="false" doc="Set true to enable debugging on the Mock CAN Driver"/>
  <arg name="debug_mock_dsrc" default="false" doc="Set true to enable debugging on the Mock dsrc Driver"/>
  <arg name="debug_mock_radar" default="false" doc="Set true to enable debugging on the Mock Radar Driver"/>
  <arg name="debug_lateral_controller" default="false" doc="Set true to enable debugging on the Lateral Control Driver"/>

  <!-- ROS Namespaces -->
  <arg name="GUIDE_NS" default="guidance" doc="Namespace of nodes in guidance package"/>
  <arg name="MSG_NS" default="message" doc="Namespace of nodes in message package"/>
  <arg name="SF_NS" default="sensor_fusion" doc="Namespace of nodes in sensor fusion package"/>
  <arg name="TS_NS" default="transform" doc="Namespace of nodes in transform server package"/>
  <arg name="RT_NS" default="route" doc="Namespace of nodes in route package"/>
  <arg name="INTR_NS" default="interface_manager" doc="Namespace of nodes in interface manager package"/>
  <arg name="UI_NS" default="ui" doc="Namespace of parameters used by the ui and rosbridge"/>
  
  <!-- Maybe don't use these -->
  <arg name="CNTRL_NS" default="controller" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="IMU_NS" default="imu" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="GNSS_NS" default="gnss" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="COMMS_NS" default="comms" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="LIDAR_NS" default="lidar" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="CAMERA_NS" default="camera" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="CAN_NS" default="can" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="RDWY_NS" default="roadway_sensor" doc="Namespace of parameters used by the ui and rosbridge"/>
  <arg name="RADAR_NS" default="radar" doc="Namespace of parameters used by the ui and rosbridge"/>

  <!-- Remove after TO 26 demo -->
  <arg name="use_rosbag" default="false" doc="Record a rosbag"/>


  <!-- Set package path for use with relative file paths -->
  <param name="package_path" value="$(arg CARMA_DIR)"/>

  <!-- Generate log name configuration file -->
  <param name="log_name" type="str" command="$(arg SCRIPTS_DIR)/generate_log_name.sh"/>

  <!-- Load Vehicle Characteristics -->
  <rosparam command="load" file="$(arg PARAM_DIR)/HostVehicleParams.yaml"/>

  <!-- Simulated Mock Drivers -->
  <include file="$(arg CARMA_DIR)/launch/mock_drivers.launch" pass_all_args="true"/>

  <!--Lateral Controller Driver Node TODO-->
  <node if="$(arg mock_lateral_controller)" pkg="carma" type="lateral_control_driver" name="lateral_controller" args="gov.dot.fhwa.saxton.carma.lateralcontroldriver.LateralControlDriver">

    <env if="$(arg debug_lateral_controller)" name="LATERAL_CONTROL_DRIVER_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

    <rosparam command="load" file="$(arg PARAM_DIR)/LateralControllerParams.yaml"/>
  </node>

  <!--Driver Launch File if Using Actual Drivers -->
  <remap from="ui_instructions" to="/$(arg UI_NS)/ui_instructions"/>

  <remap from="system_alert" to="/system_alert"/>

  <include file="$(arg LAUNCH_DIR)/drivers.launch">
    <arg name="mock_dsrc" value="$(arg mock_dsrc)" />
    <arg name="mock_pinpoint" value="$(arg mock_pinpoint)" />
    <arg name="mock_can" value="$(arg mock_can)" />
    <arg name="mock_srx_controller" value="$(arg mock_srx_controller)" />
    <arg name="mock_radar" value="$(arg mock_radar)" />
    <arg name="CARMA_DIR" value="$(arg CARMA_DIR)" />
    <arg name="PARAM_DIR" value="$(arg PARAM_DIR)" />
  </include>


  <!-- Interface Manager Package -->
  <group ns="$(arg INTR_NS)">

    <!-- Interface Manager Node -->
    <node pkg="carma" type="interfacemgr" name="interface_mgr" args="gov.dot.fhwa.saxton.carma.interfacemgr.InterfaceMgr" required="true">

      <env if="$(arg debug_interface_mgr)" name="INTERFACEMGR_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>

      <rosparam command="load" file="$(arg PARAM_DIR)/InterfaceMgrParams.yaml"/>

      <remap from="system_alert" to="/system_alert"/>
      <remap from="driver_discovery" to="/driver_discovery"/>
    </node>
  </group>

  <!-- Transforms Stack -->
  <include file="$(arg LAUNCH_DIR)/transforms.launch">
    <arg name="URDF_FILE" value="$(arg URDF_FILE)"/>
  </include>

  <!-- Localization Stack -->
  <include file="$(arg LAUNCH_DIR)/localization.launch"/>

  <!-- Comms Stack -->
  <include file="$(arg LAUNCH_DIR)/comms.launch">
    <arg name="GUIDE_NS" value="$(arg GUIDE_NS)"/>
    <arg name="PARAM_DIR" value="$(arg PARAM_DIR)"/>
  </include>

  <!-- Environment Perception Stack -->
  <include file="$(arg LAUNCH_DIR)/environment.launch"/>

  <!-- Guidance Stack -->
  <include file="$(arg LAUNCH_DIR)/guidance.launch">
    <arg name="PARAM_DIR" value="$(arg PARAM_DIR)"/>
    <arg name="JVM_DEBUG_OPTS" value="$(arg JVM_DEBUG_OPTS)"/>
    <arg name="log_config" value="$(arg log_config)"/>
    <arg name="debug_guidance" value="$(arg debug_guidance)"/>
    <arg name="MSG_NS" value="$(arg MSG_NS)"/>
    <arg name="SF_NS" value="$(arg SF_NS)"/>
    <arg name="TS_NS" value="$(arg TS_NS)"/>
    <arg name="RT_NS" value="$(arg RT_NS)"/>
    <arg name="UI_NS" value="$(arg UI_NS)"/>
  </include>

  <include file="$(arg LAUNCH_DIR)/ui.launch">
    <arg name="PARAM_DIR" value="$(arg PARAM_DIR)"/>
    <arg name="MSG_NS" value="$(arg MSG_NS)"/>
    <arg name="SF_NS" value="$(arg SF_NS)"/>
    <arg name="GUIDE_NS" value="$(arg GUIDE_NS)"/>
    <arg name="RT_NS" value="$(arg RT_NS)"/>
    <arg name="INTR_NS" value="$(arg INTR_NS)"/>
  </include>

  <!-- TODO should there be a data collection launch fileRecord Rosbag of all topics excluding /rosout and CAN messages since they may contain sensetive data -->
  <node pkg="rosbag" type="record" name="rosbag_node" args="record -o /opt/carma/logs/ -a -x '/rosout(.*)|(.*)/received_messages|(.*)/sent_messages'" if="$(arg use_rosbag)" />
</launch>
