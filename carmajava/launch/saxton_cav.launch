<!-- 
	saxton_cav.launch

  A the ros launch file for the STOL CAV Prototype ROS Network.
  Launches all the needed ros nodes and sets up the parameter server.
  Also sets up all static transforms used by tf2 within the system.

  Use:
  First delete the generated build/scripts folder in all java packages.
  roslaunch carma saxton_cav.launch
  After using source devel/setup.bash from workspace root.

  If using simulated drivers they are activated using ros arguments as shown below.
  roslaunch carma saxton_cav.launch mock_can:=true can_data_file:=/path/to/file.csv
-->
<launch>
  <!-- Constants -->
  <!-- Directory of Parameter Files -->
  <arg name="PARAM_DIR" value="$(find carma)/launch/params" doc="Directory of yaml parameter files"/>
  <!-- Path to Unified Robot Description Format URDF file for loading static transforms -->
  <arg name="URDF_FILE" value="$(find carma)/launch/urdf/saxton_cav_green_srx.urdf" doc="Path to the vehicle's URDF file"/>
  <!-- Simulated Driver Arguments -->
  <!-- Simulation Usage -->
  <arg name="mock_can"              value="false" doc="True if using a simulated can driver"/>
  <arg name="mock_arada"            value="false" doc="True if using a simulated arada driver"/>
  <arg name="mock_srx_controller"   value="false" doc="True if using a simulated srx controller driver"/>
  <arg name="mock_pinpoint"         value="false" doc="True if using a simulated pinpoint driver"/>
  <arg name="mock_radar"            value="false" doc="True if using a simulated radar driver"/>
  <arg name="mock_cellular"         value="false" doc="True if using a simulated cellular driver"/>

  <!-- Data Files -->
  <arg name="can_data_file"              value="test_data/can.csv" doc="Path for can simulation data"/>
  <arg name="arada_data_file"            value="test_data/arada.csv" doc="Path for arada simulation data"/>
  <arg name="srx_controller_data_file"   value="test_data/srx_controller.csv" doc="Path for srx controller simulation data"/>
  <arg name="pinpoint_data_file"         value="test_data/pinpoint.csv" doc="Path for pinpoint simulation data"/>
  <arg name="radar_data_file"            value="test_data/radar.csv" doc="Path for radar simulation data"/>
  <arg name="cellular_data_file"         value="test_data/cellular.csv" doc="Path cellular can simulation data"/>

  <!-- ROS Namespaces -->
  <arg name="TOP_NS"    value="saxton_cav" doc="CAV Prototype system namespace"/>
  <arg name="GUIDE_NS"  value="guidance" doc="Namespace of nodes in guidance package"/>
  <arg name="VE_NS"     value="vehicle_environment" doc="Namespace of nodes in vehicle environment package"/>/>
  <arg name="NEGTR_NS"  value="negotiator" doc="Namespace of nodes in negotiator package"/>/>
  <arg name="MSG_NS"    value="message" doc="Namespace of nodes in message package"/>/>
  <arg name="SF_NS"     value="sensor_fusion" doc="Namespace of nodes in sensor fusion package"/>/>
  <arg name="RD_NS"     value="roadway" doc="Namespace of nodes in roadway package"/>/>
  <arg name="RT_NS"     value="route" doc="Namespace of nodes in route package"/>/>
  <arg name="DRIVER_NS" value="drivers" doc="Namespace of nodes in drivers package"/>/>
  <arg name="INTR_NS"   value="interface_manager" doc="Namespace of nodes in interface manager package"/>/>

  <!-- Launch Nodes -->
  <group ns="$(arg TOP_NS)">

    <!-- Load Vehicle Characteristics -->
    <rosparam command="load" file="$(arg PARAM_DIR)/HostVehicleParams.yaml"/>

    <!-- ROS Bridge -->
    <!-- TODO: Determine proper remapping for rosbridge params -->
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch" >
      <arg name="port" value="9090"/> <!-- The default port for rosbridge is 9090 -->
    </include>

    <!-- Guidance Package -->
    <group ns="$(arg GUIDE_NS)">
      <!-- Guidance Main Node -->
      <node pkg="carma" type="guidance" name="guidance_main"
            args="gov.dot.fhwa.saxton.carma.guidance.GuidanceMain">
        <rosparam command="load" file="$(arg PARAM_DIR)/GuidanceParams.yaml"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/CommandAPIParams.yaml"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/ArbitratorParams.yaml"/>

        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="get_drivers_with_capabilities"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg INTR_NS)/get_drivers_with_capabilities"/>
        <remap from="new_plan_inbound"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg NEGTR_NS)/new_plan"/>
        <remap from="plan_status"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg NEGTR_NS)/plan_status"/>

        <!-- Arbitrator Thread-->
        <remap from="route_state" to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg RT_NS)/route_state"/>

        <!-- Tracking Thread-->
        <remap from="heading"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/heading"/>
        <remap from="nav_sat_fix"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/nav_sat_fix"/>
        <remap from="velocity" to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/velocity"/>

        <!-- Trajectory Thread-->
        <remap from="get_drivers_with_capabilities"
               to="/$(arg TOP_NS)/$(arg INTR_NS)/get_drivers_with_capabilities"/>

        <!-- Trajectory and Arbitrator -->
        <remap from="route_state" to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg RT_NS)/route_state"/>

        <!-- Maneuvers Thread-->
        <remap from="roadway_environment"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg RD_NS)/roadway_environment"/>
        <remap from="route"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg RT_NS)/route"/>

        <!-- Plugin Cruising Thread-->
        <remap from="get_available_routes"
               to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg RT_NS)/get_available_routes"/>
      </node>
    </group>

    <!-- Vehicle Environment Package -->
    <group ns="$(arg VE_NS)">

      <!-- Message Package -->
      <group ns="$(arg MSG_NS)">

        <!-- Message Consumer Node -->
        <node pkg="carma" type="message" name="message_consumer"
              args="gov.dot.fhwa.saxton.carma.message.MessageConsumer">
          <remap from="system_alert"
                 to="/$(arg TOP_NS)/system_alert"/>
          <remap from="host_bsm"
                 to="/$(arg TOP_NS)/$(arg GUIDE_NS)/tracking/bsm"/>
          <remap from="mobility_ack_outbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg NEGTR_NS)/mobility_ack"/>
          <remap from="mobility_greeting_outbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg NEGTR_NS)/mobility_greeting"/>
          <remap from="mobility_intro_outbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg NEGTR_NS)/mobility_intro"/>
          <remap from="mobility_nack_outbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg NEGTR_NS)/mobility_nack"/>
          <remap from="mobility_plan_outbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg NEGTR_NS)/mobility_plan"/>
        </node>
      </group>

      <!-- Negotiator Package -->
      <group ns="$(arg NEGTR_NS)">

        <!-- Negotiator Node -->
        <node pkg="carma" type="negotiator" name="negotiator_mgr"
              args="gov.dot.fhwa.saxton.carma.negotiator.NegotiatorMgr">

          <remap from="system_alert"
                 to="/$(arg TOP_NS)/system_alert"/>
          <remap from="host_bsm"
                 to="/$(arg TOP_NS)/$(arg GUIDE_NS)/new_plan"/>
          <remap from="mobility_ack_inbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/mobility_ack"/>
          <remap from="mobility_greeting_inbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/mobility_greeting"/>
          <remap from="mobility_intro_inbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/mobility_intro"/>
          <remap from="mobility_nack_inbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/mobility_nack"/>
          <remap from="mobility_plan_inbound"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/mobility_plan"/>
        </node>
      </group>

      <!-- Sensor Fusion Package -->
      <group ns="$(arg SF_NS)">

        <!-- Sensor Fusion Node -->
        <node pkg="sensor_fusion" type="sensor_fusion_node" name="sensor_fusion">
          <remap from="~filtered"
                 to="filtered"/>
          <remap from="system_alert"
                 to="/$(arg TOP_NS)/system_alert"/>
          <remap from="bsm"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/bsm"/>
        </node>
      </group>

      <!-- Roadway Package -->
      <group ns="$(arg RD_NS)">

        <!-- Environment Manager Node -->
        <node pkg="carma" type="roadway" name="environment_manager"
              args="gov.dot.fhwa.saxton.carma.roadway.EnvironmentManager">
          <remap from="system_alert"
                 to="/$(arg TOP_NS)/system_alert"/>
          <remap from="map"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/map"/>
          <remap from="route_current_segment"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg RT_NS)/current_segment"/>
          <remap from="heading"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/heading"/>
          <remap from="nav_sat_fix"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/nav_sat_fix"/>
          <remap from="odometry"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/odometry"/>
          <remap from="tracked_objects"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/tracked_objects"/>
          <remap from="tracked_vehicles"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/tracked_vehicles"/>
          <remap from="velocity"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/velocity"/>
          <remap from="getTransform"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg RT_NS)/transform_server/getTransform"/>
        </node>

        <!-- Transform Server Node -->
        <node pkg="carma" type="roadway" name="transform_server"
              args="gov.dot.fhwa.saxton.carma.roadway.TransformServer">
          <remap from="system_alert"
                 to="/$(arg TOP_NS)/system_alert"/>
        </node>
      </group>

      <!-- Route Package -->
      <group ns="$(arg RT_NS)">

        <!-- Route Manager Node -->
        <node pkg="carma" type="route" name="route_manager"
              args="gov.dot.fhwa.saxton.carma.route.RouteManager">
          <rosparam command="load" file="$(arg PARAM_DIR)/RouteParams.yaml"/>

          <remap from="system_alert"
                 to="/$(arg TOP_NS)/system_alert"/>
          <remap from="tim"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg MSG_NS)/tim"/>
          <remap from="nav_sat_fix"
                 to="/$(arg TOP_NS)/$(arg VE_NS)/$(arg SF_NS)/filtered/nav_sat_fix"/>
        </node>
      </group>
    </group>

    <!-- Interface Manager Package -->
    <group ns="$(arg INTR_NS)">

      <!-- Interface Manager Node -->
      <node pkg="carma" type="interfacemgr" name="interface_mgr"
            args="gov.dot.fhwa.saxton.carma.interfacemgr.InterfaceMgr">

        <remap from="system_alert"
               to="/$(arg TOP_NS)/system_alert"/>
        <remap from="tim"
               to="/$(arg TOP_NS)/$(arg DRIVER_NS)/driver_discovery"/>
      </node>
    </group>

    <!-- Drivers Package -->
    <group ns="$(arg DRIVER_NS)">

      <remap from="system_alert"
             to="/$(arg TOP_NS)/system_alert"/>

      <!-- Simulation Usage -->
      <arg name="mock_can"              value="false"/>
      <arg name="mock_arada"            value="false"/>
      <arg name="mock_srx_controller"   value="false"/>
      <arg name="mock_truck_controller" value="false"/>
      <arg name="mock_pinpoint"         value="false"/>
      <arg name="mock_radar"            value="false"/>
      <arg name="mock_cellular"         value="false"/>

      <!-- Data Files -->
      <arg name="can_data_file"              value="test_data/can.csv"/>
      <arg name="arada_data_file"            value="test_data/arada.csv"/>
      <arg name="srx_controller_data_file"   value="test_data/srx_controller.csv"/>
      <arg name="truck_controller_data_file" value="test_data/truck_controller.csv"/>
      <arg name="pinpoint_data_file"         value="test_data/pinpoint.csv"/>
      <arg name="radar_data_file"            value="test_data/radar.csv"/>
      <arg name="cellular_data_file"         value="test_data/cellular.csv"/>



      <!-- Arada OBU Driver Node -->
      <node unless="$(arg mock_arada)" pkg="arada" type="arada_node" name="arada_application">
        <rosparam command="load" file="$(arg PARAM_DIR)/AradaOBUParams.yaml"/>
      </node>
      <!-- Simulated Arada Driver Node -->
      <node if="$(arg mock_arada)" pkg="carma" type="mock_drivers" name="arada_application"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriver">
        <param name="simulated_driver" type="string" value="arada"/>
        <param name="data_file_path" type="string" value="$(arg arada_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/AradaOBUParams.yaml"/>
      </node>

      <!-- PinPoint Driver Node -->
      <node unless="$(arg mock_pinpoint)" pkg="pinpoint" type="pinpoint_node" name="pin_point_application">
        <rosparam command="load" file="$(arg PARAM_DIR)/PinPointParams.yaml"/>
      </node>
      <!-- Simulated PinPoint Driver Node -->
      <node if="$(arg mock_pinpoint)" pkg="carma" type="mock_drivers" name="pin_point_application"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriver">
        <param name="simulated_driver" type="string" value="pinpoint"/>
        <param name="data_file_path" type="string" value="$(arg pinpoint_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/PinPointParams.yaml"/>
      </node>

      <!-- SRX CAN Driver Node -->
      <node unless="$(arg mock_can)" pkg="can" type="can_node" name="can_application">
        <rosparam command="load" file="$(arg PARAM_DIR)/SRXCANParams.yaml"/>
      </node>
      <!-- Simulated CAN Driver Node -->
      <node if="$(arg mock_can)" pkg="carma" type="mock_drivers" name="srx_can_application"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriver">
        <param name="simulated_driver" type="string" value="can"/>
        <param name="data_file_path" type="string" value="$(arg can_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/SRXCANParams.yaml"/>
      </node>

      <!--SRX Controller Driver Node-->
      <node unless="$(arg mock_srx_controller)" pkg="srx_controller" type="srx_controller_node" name="srx_application">
        <rosparam command="load" file="$(arg PARAM_DIR)/SRXControllerParams.yaml"/>
      </node>
      <!-- Simulated SRX Controller Driver Node -->
      <node if="$(arg mock_srx_controller)" pkg="carma" type="mock_drivers" name="srx_application"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriver">
        <param name="simulated_driver" type="string" value="srx_controller"/>
        <param name="data_file_path" type="string" value="$(arg srx_controller_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/SRXControllerParams.yaml"/>
      </node>

      <!-- SRX Radar Driver Node -->
      <node unless="$(arg mock_radar)" pkg="radar" type="radar_node" name="srx_object_application">
        <rosparam command="load" file="$(arg PARAM_DIR)/SRXRadarParams.yaml"/>
      </node>
      <!-- Simulated Radar Driver Node -->
      <node if="$(arg mock_radar)" pkg="carma" type="mock_drivers" name="srx_object_application"
            args="gov.dot.fhwa.saxton.carma.mock_drivers.MockDriver">
        <param name="simulated_driver" type="string" value="radar"/>
        <param name="data_file_path" type="string" value="$(arg radar_data_file)"/>
        <rosparam command="load" file="$(arg PARAM_DIR)/SRXRadarParams.yaml"/>
      </node>
    </group>


    <!-- TF2 Setup Initial Static Transforms -->
    <!-- Earth -> Map Transform -->
    <!-- Identity Transform -->
    <!-- Arguments (x y z yaw pitch roll frame_id child_frame_id) -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="earth_map_transform_pub"
          args="0 0 0 0 0 0 earth map"/>

    <!-- Vehicle Transforms -->
    <param name="robot_description" textfile="$(arg URDF_FILE)"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher"/>

  </group>
</launch>